import cv2
import numpy as np
import os
import string
import random

def generate_random_noise(img_size=(48, 48)):
    """Generate an image with random noise."""
    return np.random.randint(0, 256, img_size, dtype=np.uint8)

def generate_random_shape(img_size=(48, 48)):
    """Generate an image with random shapes (circle, square, etc.)."""
    img = np.zeros(img_size, dtype=np.uint8)
    shape_type = random.choice(['circle', 'rectangle', 'line'])
    if shape_type == 'circle':
        radius = random.randint(5, 20)
        center = (random.randint(10, img_size[0]-10), random.randint(10, img_size[1]-10))
        cv2.circle(img, center, radius, (255), -1)
    elif shape_type == 'rectangle':
        pt1 = (random.randint(5, img_size[0]//2), random.randint(5, img_size[1]//2))
        pt2 = (random.randint(img_size[0]//2, img_size[0]-5), random.randint(img_size[1]//2, img_size[1]-5))
        cv2.rectangle(img, pt1, pt2, (255), -1)
    elif shape_type == 'line':
        pt1 = (random.randint(0, img_size[0]), random.randint(0, img_size[1]))
        pt2 = (random.randint(0, img_size[0]), random.randint(0, img_size[1]))
        cv2.line(img, pt1, pt2, (255), random.randint(1, 3))
    return img

def generate_random_text(img_size=(48, 48)):
    """Generate an image with random letters or digits."""
    img = np.zeros(img_size, dtype=np.uint8)
    font = cv2.FONT_HERSHEY_SIMPLEX
    text = random.choice(string.ascii_letters + string.digits)
    font_scale = 0.8
    thickness = 2
    text_size = cv2.getTextSize(text, font, font_scale, thickness)[0]
    text_x = (img_size[0] - text_size[0]) // 2
    text_y = (img_size[1] + text_size[1]) // 2
    cv2.putText(img, text, (text_x, text_y), font, font_scale, (255), thickness)
    return img

def generate_non_tick_dataset(output_folder, num_images=500, img_size=(48, 48)):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    for i in range(num_images):
        img_type = random.choice(['noise', 'shape', 'text'])
        
        if img_type == 'noise':
            img = generate_random_noise(img_size)
        elif img_type == 'shape':
            img = generate_random_shape(img_size)
        elif img_type == 'text':
            img = generate_random_text(img_size)
        
        # Save the image to the output folder
        output_path = os.path.join(output_folder, f'non_tick_{i}.png')
        cv2.imwrite(output_path, img)

    print(f'{num_images} non-tick images saved to {output_folder}')

# Generate 500 non-tick images
generate_non_tick_dataset('data/non_ticks', num_images=500)
